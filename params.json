{"name":"Refined","tagline":"Refinement types for Scala","body":"# refined\r\n[![Build Status](https://img.shields.io/travis/fthomas/refined.svg)](https://travis-ci.org/fthomas/refined)\r\n[![Download](https://img.shields.io/maven-central/v/eu.timepit/refined_2.11.svg)][search.maven]\r\n[![Gitter](https://img.shields.io/badge/GITTER-join%20chat-brightgreen.svg)](https://gitter.im/fthomas/refined?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Coverage Status](https://img.shields.io/coveralls/fthomas/refined/master.svg)](https://coveralls.io/r/fthomas/refined)\r\n[![Codacy Badge](https://img.shields.io/codacy/e4f25ef2656e463e8fed3f4f9314abdb.svg)](https://www.codacy.com/app/fthomas/refined)\r\n\r\n## Overview\r\n\r\nThis is a port of the [refined][refined.hs] Haskell library to Scala.\r\nThe linked websites provides an excellent motivation why this kind of library\r\nis useful.\r\n\r\nThis library consists of:\r\n\r\n* Type-level predicates for refining other types, like `UpperCase`, `Positive`,\r\n  `Greater[_0] And LessEqual[_2]`, or `Length[Greater[_5]]`. There are also higher\r\n  order predicates for combining proper predicates like `And[_, _]`, `Or[_, _]`,\r\n  `Not[_]`, `Forall[_]`, or `Size[_]`.\r\n\r\n* A `Predicate` type class that is able to validate a concrete data type (like `Double`)\r\n  against a type-level predicate (like `Positive`).\r\n\r\n* Two functions `refine` and `refineLit` that take a predicate `P` and some value\r\n  of type `T`, validates this value with a `Predicate[P, T]` and returns the value\r\n  with type `T @@ P` if validation was successful or an error otherwise.\r\n  (`@@` is [shapeless'][shapeless] type for tagging types :-))\r\n\r\n## Examples\r\n\r\n```scala\r\nscala> refine[Positive](5)\r\nres0: Either[String, Int @@ Positive] = Right(5)\r\n\r\nscala> refine[Positive](-5)\r\nres1: Either[String, Int @@ Positive] = Left(Predicate failed: (-5 > 0).)\r\n\r\nscala> refineLit[NonEmpty](\"Hello\")\r\nres2: String @@ NonEmpty = Hello\r\n\r\nscala> refineLit[NonEmpty](\"\")\r\n<console>:27: error: Predicate isEmpty() did not fail.\r\n            refineLit[NonEmpty, String](\"\")\r\n                                       ^\r\n\r\nscala> type ZeroToOne = Not[Less[_0]] And Not[Greater[_1]]\r\ndefined type alias ZeroToOne\r\n\r\nscala> refineLit[ZeroToOne](1.8)\r\n<console>:27: error: Right predicate of (!(1.8 < 0) && !(1.8 > 1)) failed: Predicate (1.8 > 1) did not fail.\r\n              refineLit[ZeroToOne, Double](1.8)\r\n                                          ^\r\n\r\nscala> refineLit[AnyOf[Digit :: Letter :: Whitespace :: HNil]]('F')\r\nres3: Char @@ AnyOf[Digit :: Letter :: Whitespace :: HNil] = F\r\n```\r\n\r\nNote that `refineLit` (which only supports literals) is implemented as macro\r\nand checks at compile time if the given literal conforms to the predicate.\r\n\r\n## Installation\r\n\r\nThe latest version of the library is 0.0.2, which is built against Scala 2.11.\r\n\r\nIf you're using SBT, add the following to your build file:\r\n\r\n    libraryDependencies += \"eu.timepit\" %% \"refined\" % \"0.0.2\"\r\n\r\nInstructions for Maven and other build tools is available at [search.maven.org][search.maven].\r\n\r\n## Documentation\r\n\r\nAPI documentation of the latest release is available at:\r\nhttp://fthomas.github.io/refined/latest/api/\r\n\r\n## Provided predicates\r\n\r\nThe library comes with these predefined predicates:\r\n\r\n[`boolean`](https://github.com/fthomas/refined/blob/master/src/main/scala/eu/timepit/refined/boolean.scala)\r\n\r\n* `True`: constant predicate that is always `true`\r\n* `False`: constant predicate that is always `false`\r\n* `Not[P]`: negation of the predicate `P`\r\n* `And[A, B]`: conjunction of the predicates `A` and `B`\r\n* `Or[A, B]`: disjunction of the predicates `A` and `B`\r\n* `AllOf[PS]`: conjunction of all predicates in `PS`\r\n* `AnyOf[PS]`: disjunction of all predicates in `PS`\r\n\r\n[`char`](https://github.com/fthomas/refined/blob/master/src/main/scala/eu/timepit/refined/char.scala)\r\n\r\n* `Digit`: checks if a `Char` is a digit\r\n* `Letter`: checks if a `Char` is a letter\r\n* `LowerCase`: checks if a `Char` is a lower case character\r\n* `UpperCase`: checks if a `Char` is an upper case character\r\n* `Whitespace`: checks if a `Char` is white space\r\n\r\n[`collection`](https://github.com/fthomas/refined/blob/master/src/main/scala/eu/timepit/refined/collection.scala)\r\n\r\n* `Count[PA, PC]`: counts the number of elements in a `TraversableOnce` which\r\n  satisfy the predicate `PA` and passes the result to the predicate `PC`\r\n* `Empty`: checks if a `TraversableOnce` is empty\r\n* `NonEmpty`: checks if a `TraversableOnce` is not empty\r\n* `Forall[P]`: checks if the predicate `P` holds for all elements of a\r\n  `TraversableOnce`\r\n* `Exists[P]`: checks if the predicate `P` holds for some elements of a\r\n  `TraversableOnce`\r\n* `Size[P]`: checks if the size of a `TraversableOnce` satisfies the predicate `P`\r\n* `MinSize[N]`: checks if the size of a `TraversableOnce` is greater than\r\n  or equal to `N`\r\n* `MaxSize[N]`: checks if the size of a `TraversableOnce` is less than\r\n  or equal to `N`\r\n\r\n[`generic`](https://github.com/fthomas/refined/blob/master/src/main/scala/eu/timepit/refined/generic.scala)\r\n\r\n* `Equal[U]`: checks if a value is equal to `U`\r\n\r\n[`numeric`](https://github.com/fthomas/refined/blob/master/src/main/scala/eu/timepit/refined/numeric.scala)\r\n\r\n* `Less[N]`: checks if a numeric value is less than `N`\r\n* `LessEqual[N]`: checks if a numeric value is less than or equal to `N`\r\n* `Greater[N]`: checks if a numeric value is greater than `N`\r\n* `GreaterEqual[N]`: checks if a numeric value is greater than or equal to `N`\r\n* `Positive`: checks if a numeric value is greater than 0\r\n* `Negative`: checks if a numeric value is less than 0\r\n* `Interval[L, H]`: checks if a numeric value is in the interval [`L`, `H`]\r\n\r\n[`string`](https://github.com/fthomas/refined/blob/master/src/main/scala/eu/timepit/refined/string.scala)\r\n\r\n* `MatchesRegex[R]`: checks if a `String` matches the regular expression `R`\r\n\r\n## Custom predicates\r\n\r\n## Related projects\r\n\r\nThis library is heavily inspired by the [refined][refined.hs] library for\r\nHaskell. It even stole its name! Another Scala library that provides type-level\r\nvalidations is [bond][bond].\r\n\r\n## License\r\n\r\nrefined is licensed under the MIT license, available at http://opensource.org/licenses/MIT\r\nand also in the [LICENSE](https://github.com/fthomas/refined/blob/master/LICENSE) file.\r\n\r\n[bond]: https://github.com/fwbrasil/bond\r\n[refined.hs]: http://nikita-volkov.github.io/refined\r\n[search.maven]: http://search.maven.org/#search|ga|1|eu.timepit.refined\r\n[shapeless]: https://github.com/milessabin/shapeless\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}