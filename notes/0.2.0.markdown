### Changes

* TODO: deprecated refine and refineLit
* TODO: new refine variants + Refined type (Refined works with type aliases)
* TODO: link to FieldNames examples
* TODO: link to examples that uses type aliases

* Deprecated `refine` and `refineLit` in favor of the new `refineT` and
  `refineMT` (where `T` stands for tag/`@@` and `M` stands for macro).
  There are two other variants of these functions, `refineV` and `refineMV`,
  that use the newly added `Refined` value class instead of `@@`. The advantages
  of `Refined` is that it can be used in combination with type aliases.
* Add string utility functions to create statically checked regular expressions,
  URIs, and URLs. ([#35])
* Lift the restriction to refine only literal values at compile-time if a
  `Predicate` is constant (i.e. it ignores its argument when calling `isValid`).
  Some examples of constant predicates are `True` or `False` or the newly added
  `ConstructorNames` and `FieldNames` predicates. ([#26])
* Enable tests in the Scala.js build. ([#29])
* Remove `refine` from `Predicate` since the purpose of `Predicate` is
  to check whether a value conforms to a type-level predicate. Refining
  the type of such value is a different concern. ([#31])

[`generic`](https://github.com/fthomas/refined/blob/v0.2.0/shared/src/main/scala/eu/timepit/refined/generic.scala)

* `ConstructorNames[P]`: checks if the constructor names of a sum type satisfy `P`
* `FieldNames[P]`: checks if the field names of a product type satisfy `P`

[#26]: https://github.com/fthomas/refined/issues/26
[#29]: https://github.com/fthomas/refined/issues/29
[#31]: https://github.com/fthomas/refined/issues/31
[#35]: https://github.com/fthomas/refined/issues/35
