### Changes

* Add `RefType.applyRef` function that refines a value according to
  refined type. This makes working with type aliases like
  ``type Minute = Int Refined Interval[W.`0`.T, W.`59`.T]`` more
  convenient because one can use `Minute` as parameter for `applyRef`,
  e.g. `applyRef[Minute](45)`. ([#78])
* Add an `anyArbitrary` module which provides `Arbitrary` instances for
  any refined type by using an `Arbitrary` of the base type and a
  `Validate` of the refinement's predicate to pick only valid values.
* Add `Arbitrary` instances for `LessEqual` and `GreaterEqual`.

[#78]: https://github.com/fthomas/refined/issues/78
